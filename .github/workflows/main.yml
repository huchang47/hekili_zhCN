# 对该工作流程的描述，可以是任何你想要的内容
name: Package and Release

# 我们需要让 GitHub 知道我们想在什么时候发布，通常只有在创建新标签时。
# 这将只针对标签，而不是所有推送到主分支的内容。
# 这一部分可以根据您的喜好进行大量定制，比如只针对与某个词匹配的标签、
# 其他分支，甚至是 pullrequests。
on:
  push:
    tags:
      - "v*"

# 工作流程是以工作的形式建立起来的，而在这些工作中又有步骤
jobs:

  # "release" 这是一份工作，你可以给它起任何你想要的名字
  release:

    # 我们可以在任何地方运行我们的步骤，但 "ubuntu-latest "镜像是一个安全的选择
    runs-on: ubuntu-latest

    # 指定打包程序使用的环境变量，与 GitHub 上项目的机密相匹配
    env:
      CF_API_KEY: ${{ secrets.CF_API_KEY }}
      WOWI_API_TOKEN: ${{ secrets.WOWI_API_TOKEN }}
      WAGO_API_TOKEN: ${{ secrets.WAGO_API_TOKEN }}
      GITHUB_OAUTH: ${{ secrets.GITHUB_TOKEN }}  # "GITHUB_TOKEN "是始终提供给工作流的一个密钥
                                                 # 对于您自己的标记，名称不能以 "GITHUB_"开头
    # "steps"包含打包和发布附加组件所需的所有步骤列表
    steps:

     # 我们首先要克隆 AddOn 项目，这是一个必要步骤
      - name: Clone Project
        uses: actions/checkout@v1  # 注意：checkout@v2 会破坏 git 历史记录，因此生成更新日志和
                                   # 无标记构建的文件命名将无法正常工作

      # 克隆后，我们只需运行打包程序项目的 GitHub 操作即可
      - name: Package and Release
        run: make changelog > CHANGELOG.txt
        uses: BigWigsMods/packager@v2

      # 另一个我们提供额外参数的例子，这个例子专门用于释放
      # 经典版游戏
      # - 名称： Classic 的软件包和发布
      # 使用：BigWigsMods/packager@v1
      #   with:
      #     args: -g classic -w 0
